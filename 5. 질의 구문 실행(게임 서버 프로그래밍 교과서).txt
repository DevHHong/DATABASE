질의 구문 실행

이제 테이블을 정의했으니 여기에 플레이어 데이터를 읽고 쓰는 방법을 만들어 봅시다.
플레이어 ID와 비밀번호를 읽으로면 where 구문에서 플레이어 ID를 넣게 해야 합니다. 그리고 password 필드를 가져옵시다.
(TIP - 사용자는 자신의 플레이어 ID를 입력할 때 대-소 문자를 구별하지 않을 수 있습니다.
여기서 ID를 가져오는 이유는 이렇게 대-소문자가 구별된 ID를 확보할 수 있기 때문입니다)

select ID, password from UserAccount where ID = 'Hong Gil Dong'

플레이어가 가진 캐릭터들의 이름을 얻어 봅시다. where구문에 '소유주 플레이어 캐릭터'의 ID를
넣고 ID만 골라서 가져옵시다. 즉, select 구문을 사용합니다.

select ID from Character where OwnerUserAccountID = 'Hong Gil Dong'

플레이어가 가진 캐릭터 하나에 대한 모든 정보를 얻고 싶다면 where 구문에 캐릭터 ID를 넣으면 됩니다.
모든 필드를 가져와야 하므로 구문에 *를 사용합니다.

select * from Character where ID = 'Little Elf'

플레이어 캐릭터 하나가 가진 아이템을 모두 읽으려면 where 구문에 캐릭터 ID를 넣읍시다.
마찬가지로 * 를 사용하여 모든 필드를 가져옵니다.

select * from Item where OwnerCharacterID = 'Little Elf'

이러한 방식으로 게임 서버는 플레이어 정보를 가져올 수 있습니다.

그리고 플레이어는 게임 플레이를 하는 동안 데이터베이스에 종종 기록이 되어야 합니다.
캐릭터가 몬스터 사냥 후 경험치를 획득하면 Character에서 해당하는 레코드를 찾고, 그 레코드의
필드를 업데이트 해야 합니다. 즉, update 구문을 사용합니다.

update Character set Exp = 2493 where ID = 'Little Elf'

예를 들어 플레이어 캐릭터가 타입 34인 아이템을 3개 획득하면 insert구문을 사용하여 Item 테이블에 새 레코드를 추가.

insert into Item(ID, OwnerCharacterID, Type, Amount) values (37485, 'Little Elf', 34, 3)

캐릭터가 아이템 3개 중 1개를 소모하여 2개가 남았습니다. 그러면 update구문 사용합니다.

update Item set Amount = 2 where ID = 37485

캐릭터가 아이템을 버리면 아이템 레코드를 지워야 하니 delete구문을 사용합니다.

delete from Item where ID = 37485

지금까지 우리는 질의 구문을 데이터베이스에 던져서 레코드를 읽고 쓰는 방법을 살펴보았습니다.

게임 서버가 데이터베이스에 질의 구문을 자주 던지는 것은 비효율적입니다 이유는 다음과 같습니다.
1. 질의 구문 던지기 후 결과 받기 과정이 수행되는 동안 디바이스 타임 발생.
2. 게임 서버와 데이터베이스 간 네트워크 레이턴시를 다 모으면 꽤 긴 시간입니다.

극단적인 예를 들어 봅시다.

for(int i = 0 to 100)
{
	select xxx from yyy where zzz=i
}

이 경우 게임 서버는 데이터베이스에 select 구문을 100번 던져야 합니다.
그러면 게임 서버와 데이터베이스 사이의 대화는 100회 오가게 됩니다. 단 한번만 오가면 좋을 텐데 말이죠.

데이터베이스는 질의 구문을 받으면 이를 처리할 수 있는 준비 작업 연산을 합니다. 심지어 질의
구문을 받을 때마다 이러한 준비 작업이 연산이 발생하ㅏㅂ니다. 데이터베이스 엔진은 받은 질의
구문을 분석하고 무슨 일을 해야 할지 계획합니다. 이 과정이 매번 발생합니다. 처음 한 번만 이 일을
하고 이후부터는 생략할 수 있는 좋은 방법이 있을까요?
바로 저장 프로시저(stored procedure)라는 기능입니다.

우리는 데이터베이스 측에 미리 질의 구문 집합을 저장해 둘 수 있습니다.
이를 저장 프로시저라고 합니다. 저장 프로시저는 데이터베이스 안에서 직접 실행되는 스크립트 프로그램
이라고 할 수 있습니다.
여러분이 데이터베이스에 저장한 저장 프로시저는 사용되기 전에 실행 계획 준비 작업이 완료된 상태로
보관합니다. 이제 여러분 게임 서버는 질의 구문을 일일이 다 실행할 필요가 없습니다.
그저 저장 프로시저 자체를 실행하는 질의 구문만 실행하면 됩니다.

create procedure LoadCharacterAndItem
    @ID nvarchar(50)     --저장 프로시저의 입력 매개변수
as
begin    		      --여기서부터 저장 프로시저 루틴의 시작
	select * from Character where ID = @ID
	select * from Item where OwnerCharacterID = @ID
end		     --루틴의 끝

이렇게 하면 저장 프로시저가 데이터베이스에 추가됩니다.

여러분 게임 서버에서는 저장 프로시저를 호출하는 질의 구문을 실행합니다. 실행할 때는 다음 예
시처럼 EXEC 다음에 저장 프로시저 이름과 입력할 매개변수를 나열하세요.

EXEC LoadCharacterAndItem @ID = 'xxx'

그러면 데이터베이스는 저장 프로시저 안에 있는 많은 구문을 알아서 다 실행합니다.