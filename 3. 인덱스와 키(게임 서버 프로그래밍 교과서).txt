인덱스와 키

데이터베이스에는 이미 많은 기능이 있지만, 그 기능을 모르면 사용하지 못할 수도 있습니다.
그 중 하나가 바로 인덱스 기능입니다.

어떤 두꺼운 도서가 있을 때 거기서 여러분이 원하는 용어가 나오는 페이지를 찾으려면 어떻게 할까요?
맨 뒤에 있는 인덱스(index, 찾아보기)라는 곳을 먼저 펼치겟죠. 그리고 거기서 원하는 단어를 찾은 후
그 단어가 나와 있는 페이지를 펼칠 것입니다.

이러한 인데스가 없으면 여러분은 원하는 단어가 나올때까지 모든 페이지를 다 훑어보아야 할 것입니다.

마찬가지로 데이터베이스에서도 이러한 인덱스 기능을 쓸 수 있습니다. 인덱스는 필드 단위로 설정할 수 있습니다.
인덱스를 설정해 놓으면 특정 조건에서 어마어마하게 빠른 속도로 원하는 레코드를 찾을 수 있습니다.
어느 정도의 차이인지는 O(n)과 O(log(n))의 차이입니다. 예를 들어 레코드가 1억 개인 테이블에서 인덱스 없이
검색하면 검색 연산을 1억 번 해야 하지만, 인덱스를 갖고 검색을 하면 몇십 번 이내에 검색이 끝납니다.

인덱스는 select 구문, 즉 검색만을 위한 것이 아닙니다. 기존 레코드를 변경하거나,
레코드를 삭제할 때도 인덱스를 빨리 찾는 데 큰 도움이 됩니다.

예를 들어 다음 구문을 실행하면 table1에 있는 모든 레코드를 다 순회하면서 a = 100인 것을 찾지 않고,
 인덱스를 이용해서 a = 100인 것을 매우 적은 횟수의 순회만으로도 다 찾아내서 지울 것 입니다.

delete from table1 where a = 100

테이블 하나에 인덱스를 2개 이상 넣는 것도 가능합니다. 예를 들어 table1의 필드 a,b,c 각각에 인덱스를 추가할 수 있습니다.

인덱스는 레코드 둘 이상을 찾아낸 후 그것들을 정렬하는 용도로도 사용할 수 있습니다.
인덱스가 없다면 정렬하는 데 많은 시간이 소요됩니다. 예를 들어 table1의 필드 a 값을 기준으로 정렬된 레코드 목록을 얻고 싶을 때,
 table1의 필드 a에 대한 인덱스를 추가해 놓으면 됩니다.

인덱스는 빠른 검색 용도뿐만 아니라, 중복된 값을 방지하는 용도로도 사용합니다.
인덱스에는 유니크(unique)라는 속성을 추가로 지정할 수 있습니다. 이 유니크 속성을 추가한 인덱스, 즉 유니크 인덱스가 있을 때,
인덱스에 해당하는 필드 값이 같은 레코드가 2개 이상 들어갈 수 없게 막아 주는 역할을 합니다.

예를 들어 table1의 필드 a에 유니크 인덱스가 설정되면, 다음과 같이 a = 100인 레코드를 여럿 추가할 때 두 번째 추가 질의 구문에서 실패가 발생할 것입니다.

insert into table1 (a,b,c) values (100,200,300)
insert into table1 (a,b,c) values (100,210,310)

인덱스를 추가하는 방법은 이렇습니다. SQL Management Studio에서는 테이블에서 마우스 오른쪽 버튼을 누르고 디자인 메뉴를 택합니다.
이어 테이블 디자인 화면에서 마우스 오른쪽 버튼을 누르면 ---같은 화면이 뜹니다. 여기서 새 인덱스를 추가하면 되는데 삭제 혹은 수정도 가능합니다.

그러나 인덱스가 항상 장점만 있는 것은 아닙니다. 도서에 비유하자면, 도서 내용이 일부 변경되면 맨 뒤에 있는 인덱스도 같이 변경되어야 하는 것처럼요.
데이터베이스에서도 마찬가지로, 인덱스가 걸쳐 있는 레코드에 변화가 일어날 때, 인덱스도 같이 업데이트해야 합니다.
인덱스가 없을때보다는 기록할 때 더 많은 시간이 걸립니다. 따라서 필요하지 않은 인덱스는 가급적 걸지 않는 것이 좋습니다.
데이터베이스에는 인덱스 말고도 프라이머리 키(primary key)가 있습니다. 테이블 필드에서 마우스 오른쪽 버튼을 눌러 프라이머리 키를 설정해보세요.

프라이머리 키는 특수한 형식의 인덱스로 다음 성질이 있습니다.
*한 테이블에 하나만 추가 가능합니다.
*중복을 허락하지 않습니다. 즉, 한 테이블에 값이 같은 코드가 2개 이상 들어갈 수 없습니다.
*필드 값은 null이 허락되지 않습니다.